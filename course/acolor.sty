%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% acolor.sty
% ArabTeX refined color support
% 27.07.2014
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (C) 2000-2001 Karel Mokry
%     http://www.ucw.cz/~karel/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (C) 2007-2014 Otakar Smrz
%     http://github.com/otakar-smrz/encode-arabic/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Karel Mokry:
%   16.11.2000 version 1.0
%     - first released version
%   06.11.2001 version 1.1
%     - problems with output fixed -- looked 'broken'
%     - output from verses.sty was full of garbage
%       [reported by Daddi Addoun Yacine]
%
% Otakar Smrz:
%   23.05.2007 version 1.2
%     - reimplemented using xcolor
%     - new syntax and extended sets
%     - local scope of coloring
%   19.06.2007 version 1.3
%     - \acoloron, \noacolor, \acolorlet, and \acolor
%       are now allowed as part of the input notation
%       [reported by Torsten Nieland]
%     - explicit \nospace is generally needed in case
%       of intervening space between groups of glyphs
%     - minor bug fix in acolor names
%   27.07.2014 version 1.4
%     - fixed the tatwils generated while \spreadtrue
%       [reported by Alioune Diagne and George Kamel]
%     - enabled the coloring of 'tatwil' and 'others'
%       and included these groups within 'everything'
%       [reported by George Kamel]
%     - fixed the vertical misalignment of syllables
%     - internally using \color instead of \textcolor
%     - \color and \colorlet are now allowed as part
%       of the input notation to account for coloring
%       the current paragraph if \noacolor is applied
%

\NeedsTeXFormat{LaTeX2e}

\ProvidesPackage{acolor}[2014/07/27 Colors for ArabTeX]

\RequirePackage{xcolor}
\RequirePackage{ifthen}

\AtBeginDocument{\acoloron\acolor{everything}{.}}


% putting acolor in effect %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%

\def\acoloron{\def\a@color##1##2{{\color{acolor4##1}##2}}}

\def\noacolor{\def\a@color##1##2{##2}}


% defining acolor settings %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%

\def\acolorlet#1#2{\acolor{#1}{acolor4#2}}

\def\acolor#1#2{%
	\ifthenelse{\equal{#1}{everything}}{\acolor{letters}   {#2}%
		\acolor{omissibles}{#2}%
		\acolor{tatwil}    {#2}%
		\acolor{others}    {#2}}{%
		\ifthenelse{\equal{#1}{letters}}   {\acolor{isolated}  {#2}%
			\acolor{initial}   {#2}%
			\acolor{medial}    {#2}%
			\acolor{final}     {#2}}{%
			\ifthenelse{\equal{#1}{isolated}}  {\acolor{0}         {#2}}{%
				\ifthenelse{\equal{#1}{initial}}   {\acolor{3}         {#2}}{%
					\ifthenelse{\equal{#1}{medial}}    {\acolor{2}         {#2}}{%
						\ifthenelse{\equal{#1}{final}}     {\acolor{1}         {#2}}{%
							\ifthenelse{\equal{#1}{omissibles}}{\acolor{diacritics}{#2}%
								\acolor{hamzamadda}{#2}}{%
								\ifthenelse{\equal{#1}{diacritics}}{\acolor{vowelmarks}{#2}%
									\acolor{emptymarks}{#2}%
									\acolor{shadda}    {#2}}{%
									\ifthenelse{\equal{#1}{vowelmarks}}{\acolor{fatha}     {#2}%
										\acolor{kasra}     {#2}%
										\acolor{damma}     {#2}%
										\acolor{quran}     {#2}%
										\acolor{ammad}     {#2}%
										\acolor{zwarakay}  {#2}%
										\acolor{bars}      {#2}}{%
										\ifthenelse{\equal{#1}{emptymarks}}{\acolor{sukun}     {#2}%
											\acolor{wasla}     {#2}}{%
											\ifthenelse{\equal{#1}{hamzamadda}}{\acolor{hamza}     {#2}%
												\acolor{madda}     {#2}}{%
												\colorlet{acolor4#1}{#2}}}}}}}}}}}}\ignorespaces}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% acmd.sty
% 20.08.2003
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\all@wcmd \acoloron         \all@wtw@ \acolorlet
\all@wcmd \noacolor         \all@wtw@ \acolor
\all@w@ne \color            \all@wtw@ \colorlet


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% aboxes.sty
% 28.05.2003
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% dynamic definitions for Arabic
{\catcode `\^ 7 \catcode `\ =9 \catcode `\^^M=9 \catcode `\^^I=9
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	\gdef \def@arabaccent {% define accent macros for Arabic
		\gdef \put@fatha     {\put@acc@hi {\a@color {fatha}     {\char \a@fatha}      }}
		\gdef \put@damma     {\put@acc@hi {\a@color {damma}     {\char \a@damma}      }}
		\gdef \put@kasra     {\put@acc@lo {\a@color {kasra}     {\char \a@kasra}      }}
		\gdef \put@shadda    {\put@acc@hi {\a@color {shadda}    {\char \a@shadda}     }}
		\gdef \put@hamza     {\put@hi     {\a@color {hamza}     {\char \a@hamza}      }}
		\gdef \put@hamzalo   {\put@lo     {\a@color {hamza}     {\char \a@hamza}      }}
		\gdef \put@madda     {\put@hi     {\a@color {madda}     {\a@madda@up}         }}
		\gdef \put@sukun     {\put@acc@hi {\a@color {sukun}     {\char \a@sukun}      }}
		\gdef \put@wasla     {\put@acc@hi {\a@color {wasla}     {\char \a@wasla}      }}
		\gdef \put@fathatan  {\put@acc@hi {\a@color {fatha}     {\char \a@fathatan}   }}
		\gdef \put@dammatan  {\put@acc@hi {\a@color {damma}     {\char \a@dammatan}   }}
		\gdef \put@kasratan  {\put@acc@lo {\a@color {kasra}     {\char \a@kasratan}   }}
		\gdef \put@fathaspec {\put@acc@hi {\a@color {quran}     {\char \a@quran@alif} }}
		\gdef \put@kasraspec {\put@acc@lo {\a@color {quran}     {\char \a@quran@alif} }}
		\gdef \put@dammaspec {\put@acc@hi {\a@color {quran}     {\char \a@quran@alif} }}
		\gdef \put@ammad     {\put@acc@hi {\a@color {ammad}     {\char \a@ammad}      }}
		\gdef \put@zwarakay  {\put@acc@hi {\a@color {zwarakay}  {\char \a@zwarakay}   }}
		\gdef \put@barslo    {\put@lo     {\a@color {bars}      {\char \a@bars}       }}
		\gdef \put@kh@hamza  {\put@hi     {\a@color {hamza}     {\char \a@hamza}      }}
		\gdef \put@kl@hamza  {\put@lo     {\a@color {hamza}     {\char \a@hamza}      }}
		\gdef \put@kh@hamz@s {\put@hi     {\a@color {hamza}     {\char \a@hamz@s}     }}
		\gdef \put@kl@hamz@s {\put@lo     {\a@color {hamza}     {\char \a@hamz@s}     }}
		
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
}}% end of dynamic definitions for Arabic
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\def \put@skel #1#2#3*{% deposit writing syllable   % f d m *
	\a@color{#1}{\put@act@box #1#2\put@mod #3*\dep@sitb@x}\fix@act@box }

\def \put@lig@skel #1#2#3*#4*{% deposit 2char ligature  % f d m * m *
	\a@color{#1}{\put@act@box #1#2\global\a@wd .5\wd\ab@x
		\wd\ab@x \a@wd \dimen4 \a@ht \dimen6 \a@dp
		\global\setbox \ab@x \vbox {\box \ab@x }\put@mod #3*\dep@sitb@x
		\setbox0 \hbox to\a@wd {\hfill }\dp0 \dimen6 \ht0 \dimen4
		\global\a@ht \dimen4 \global\a@dp \dimen6
		\global\setbox \ab@x \vbox {\box0 }\put@mod #4*\dep@sitb@x}\fix@act@box }

\def \put@tat {% deposit a keshide
	\dimen@ \a@disp \advance\dimen@ \tat@ht \nobreak \hskip-\tat@wd
	\a@color{tatwil}{\leaders \hrule height\dimen@ depth-\a@disp \hskip\tat@skip \hskip-\tat@wd }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% aoutput.sty
% 04.06.2000
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\def \putwordb@x #1{% deposit a word
	\ifa@vmode \arab@indent \fi
	\setbox \wordb@x \hbox {\a@color{others}{#1}}\put@word }


\endinput 
diff --git a/cours/basique.tex b/cours/basique.tex
new file mode 100644
index 0000000..dffacd0
--- /dev/null
 b/cours/basique.tex
@@ -0,0 +1,494 @@
% !TEX TS-program = xelatex
% !TeX program = xelatex
% !TEX encoding = UTF-8
% !TEX spellcheck = fr

%=====================================================================
\ifx\wholebook\relax\else
	\documentclass{KodeBook}
	\input{calls}
	\begin{document}
		\mainmatter
	
\fi
%=====================================================================
\changegraphpath{../img/basique/}
\chapter{Traitements basiques du texte}

\begin{introduction}
	\lettrine{L}{e} 
\end{introduction} 


\section{Traitements sur les caractères}

\begin{itemize}
	\item \optword{Expressions régulières} : utilisées pour chercher des chaînes de caractères dans un texte
	\begin{itemize}
		\item reconnaissent des langages de types 3 (langages réguliers) dans la hiérarchie de Chomsky 
		\item utiles pour l'analyse lexicale (séparation des mots)
	\end{itemize}
	\item \optword{Distance d'édition} : utilisée pour mesurer la différence entre deux chaînes de caractères 
	\begin{itemize}
		\item utile pour la recherche approximative
	\end{itemize}
\end{itemize}

\subsection{Expressions régulières}

\rowcolors{2}{lightblue}{lightyellow}
\begin{tabular}{p{.1\textwidth}p{.34\textwidth}p{.46\textwidth}}
	\rowcolor{darkblue}
	\textcolor{white}{ER} & \textcolor{white}{Sens} & \textcolor{white}{Exemple} \\
	
	. & n'importe quel caractère & \keyword{beg.n} : I \expword{begun} at the \expword{begin}ning. \\
	
	\empty [aeuio] & caractères spécifiques & \keyword{[Ll][ae]} : \expword{Le} chat mange \expword{la} sourie. \\
	
	\empty [a-e] & plage de caractères & \keyword{[A-Z]..} : \expword{J'a}i vu \expword{Kar}im. \\
	
	\empty [\textasciicircum aeuio] & exclure des caractères & \keyword{[\textasciicircum A-Z]a.} : J\expword{'ai} vu Karim. \\
	
	c? & un ou zéro & \keyword{colou?r} : It is \expword{colour} or \expword{color}. \\
	
	c* & zéro ou plus & \keyword{No*n} : \expword{Nn}! \expword{Non}! \expword{Nooooooon}! \\
	
	c+ & un ou plus & \keyword{No+n} : Nn! \expword{Non}! \expword{Nooooooon}! \\
	
	c\{n\} & n occurrences & \keyword{No\{3\}n} : Nn! Non! Noon! \expword{Nooon}! \\
	
	c\{n,m\} & de n à m occurrences & \keyword{No\{1,2\}n} : Nn! \expword{Non}! \expword{Noon}! Nooon! \\
	
	c\{n,\} & au moins n occurrences & \keyword{No\{2,\}n} : Nn! Non! \expword{Noon}! \expword{Nooon}! \\
	
	c\{,m\} & au plus m occurrences & \keyword{No\{,2\}n} : \expword{Nn}! \expword{Non}! \expword{Noon}! Nooon! \\
	
\end{tabular}

\begin{minipage}{.6\textwidth}
	\begin{itemize}
		\item pour le groupement, utiliser \keyword{( )}
		\begin{itemize}
			\item Exemple, \expword{/(bla)+/} : Ceci est du \expword{blabla}.
		\end{itemize}
		\item pour la disjonction, utiliser \keyword{\textbar}
		\begin{itemize}
			\item Exemple, \expword{/continu(er\textbar ation\textbar el(le)?s?)/}
		\end{itemize}
		\item pour le début du texte, utiliser \keyword{\textasciicircum}
		\begin{itemize}
			\item Exemple, \expword{/\textasciicircum K/} :  \expword{K}ill Karim.
		\end{itemize}
		\item pour la fin du texte, utiliser \keyword{\$}
		\begin{itemize}
			\item Exemple, \expword{/\textbackslash .[\textasciicircum .]+\$/} :  fichier.tar\expword{.gz}
		\end{itemize}
		\item pour capturer un groupe, utiliser le regroupement avec \keyword{\$n} ou \keyword{\textbackslash n} où \expword{n} est la position du groupe
		\begin{itemize}
			\item Exemple, \expword{/(.*)(ement\textbar ation)\$/\textbackslash 1er/}
		\end{itemize}
	\end{itemize}
\end{minipage}
\begin{minipage}{.38\textwidth}
	\rowcolors{2}{lightblue}{lightyellow}
	\begin{tabular}{p{.2\textwidth}p{.6\textwidth}}
		\rowcolor{darkblue}
		\textcolor{white}{ER} & \textcolor{white}{Équivalence} \\
		
		\textbackslash d & [0-9] \\
		\textbackslash D & [\textasciicircum 0-9] \\
		\textbackslash w & [a-zA-Z0-9\_] \\
		\textbackslash W & [\textasciicircum \textbackslash w] \\
		\textbackslash s & [ \textbackslash r\textbackslash t\textbackslash n\textbackslash f] \\
		\textbackslash S & [\textasciicircum \textbackslash s] \\
	\end{tabular}
	
\end{minipage}

Expressions régulières : Cas d'utilisation

\begin{itemize}
	\item Les éditeurs de texte utilisent les expressions régulières (ER) pour la recherche et le remplacement
	\item La plupart des langages de programmation introduisent des mécanismes pour utiliser les ER
	\item Extraction de données : par exemple, \expword{extraire les émails et les numéros de téléphones à partir des blogs et des réseaux sociaux}
	\item \url{https://github.com/kariminf/aruudy}
	\begin{itemize}
		\item \textit{One of my crazy projects}
		\item Détection du mètre d'une verse des poèmes arabes
		\item Avantage : les règles sont lisibles
		\item Inconvénient : plusieurs passes pour traiter une verse 
	\end{itemize}
\end{itemize}

\subsection{Distance d'édition}

Opérations d'édition

\begin{itemize}
	\item \optword{Insertion} : insertion d'un caractère dans une chaîne\\
	$uv \rightarrow uxv \,/\, u, v \in X^*;\, uv \in X^+;\, x \in X$
	\begin{itemize}
		\item \expword{courir $ \rightarrow $ courrir, entraînement $ \rightarrow $ entraînnement }
	\end{itemize}
	
	\item \optword{Suppression} : suppression d'un caractère d'une chaîne\\
	$uxv \rightarrow uv \,/\, u, v \in X^*;\, uv \in X^+;\, x \in X$
	\begin{itemize}
		\item \expword{héros $ \rightarrow $ héro, meilleur $ \rightarrow $ meileur}
	\end{itemize}
	
	\item \optword{Substitution} : substitution d'un caractère par un autre\\
	$uxv \rightarrow uyv \,/\, u, v \in X^*;\, x, y \in X;\, x \ne y$
	\begin{itemize}
		\item \expword{cela $ \rightarrow $ celà, croient $ \rightarrow $ croyent }
	\end{itemize}
	
	\item \optword{Transposition} : changement de l'ordre de deux caractères\\
	$uxwyv \rightarrow uywxv \,/\, u, v, w \in X^*;\, x, y \in X;\, x \ne y$
	\begin{itemize}
		\item \expword{cueillir $ \rightarrow $ ceuillir}
	\end{itemize}
\end{itemize}

Algorithmes
\begin{itemize}
	\item \optword{Distance de Hamming} : permet seulement la substitution. Les chaînes doivent être de la même longueur. 
	\item \optword{Plus longue sous-séquence commune} : permet l'insertion et la suppression
	\item \optword{Distance de Levenshtein} : permet l'insertion, la suppression et la substitution
	\item \optword{Distance de Jaro} : permet la transposition
	\item \optword{Distance de Damerau–Levenshtein} : permet l'insertion, la suppression, la substitution et la transposition entre deux caractères adjacents
\end{itemize}

Distance de Levenshtein
\begin{itemize}
	\item X ; une chaîne source de longueur $n$
	\item Y : chaîne destinataire de longueur $m$
	\item D : une matrice où D[i, j] est la distance d'édition entre les sous-chaînes X[1..i] et Y[1..j]
	\item pour calculer $D[n, m]$, on utilise la programmation dynamique
	\item $D[0, 0] = 0$
\end{itemize}

\[
D[i, j] = \min 
\begin{cases}
D[i - 1, j] + 1 \text{ //Suppression}\\
D[i, j-1] + 1 \text{ //Insertion}\\
D[i-1, j-1] + \begin{cases}
2 & \text{si } X[i] \ne Y[j] \\
0 & \text{sinon}
\end{cases}
\end{cases}
\]

Distance de Levenshtein (exemple)
\begin{figure}
	\centering
	\hgraphpage{exp-levenshtein_.pdf}
	\caption{Exemple de calcul de distance de Levenshtein \cite{2019-jurafsky-martin}}
\end{figure}

Quelques applications
\begin{itemize}
	\item Révision des fichiers : par exemple, la commande Unix \expword{diff} qui compare entre deux fichiers.
	\item Correction d'orthographe : suggérer des corrections possibles d'une faute (ex. \expword{Hunspell}).
	\item Détection du plagiat : ici, on utilise des mots à la place des caractères.
	\item Filtrage de spam : parfois, les spammeurs commettent des fautes d'orthographe intentionnellement pour tromper l'outil de détection de spam.
	\item Bio-informatique : quantification de la similarité entre deux séquences d'ADN.
\end{itemize}

%===================================================================================
\section{Segmentation du texte}
%===================================================================================

\begin{itemize}
	\item Un nouveau paragraphe est marqué par un retour à la ligne ou en utilisant la balise \keyword{\textless p\textgreater} en HTML.
	\begin{itemize}
		\item Lorsqu'on utilise un outil pour extraire du texte à partir des pdfs, on aura plusieurs retours à la ligne 
	\end{itemize}
	\item Une nouvelle phrase est marquée par un point (ou une autre marque)
	\begin{itemize}
		\item Le point n'est pas seulement utilisé pour marquer une phrase
	\end{itemize}
	\item Un mot est délimité par une espace 
	\begin{itemize}
		\item Pas toujours 
	\end{itemize}
\end{itemize}

\subsection{Délimitation de la phrase}

Problématique
\begin{itemize}
	\item \expword{/[.?!]/} est une ER simple utilisée pour délimiter les phrases (français, anglais, etc.)
	\item Le point est utilisé dans les nombres : \expword{123,456.78 (style américain) 123.456,78 (style européen)}
	\item Les abréviations contiennent des points
	\item Des phrases longues sont difficiles à traiter ; il faut mieux les séparer 
	\item Les phrases entre guillemets
	\item Des langues, comme le thaï, n'utilisent pas des marqueurs pour séparer les phrases  
\end{itemize}

Facteurs de segmentation
\begin{itemize}
	\item \optword{La casse} : les phrases commencent par un majuscule
	\item \optword{Catégorie grammaticale} : les catégories des mots avant le point peuvent aider la décision (limite ou non)
	\item \optword{Longueur du mot} : les abréviations sont moins longues 
	\item \optword{Préfixes et suffixes} : les mots avec des infixes sont moins probables d'être des abréviations
	\item \optword{Classes des abréviations} 
	\item \optword{Noms propres} : les noms propres se commencent par un majuscule ; ils peuvent ne pas être le début d'une phrase
\end{itemize}

\subsection{Séparation des mots}

Problématique
\begin{itemize}
	\item \expword{/[ ]+/} est une ER simple utilisée pour séparer les mots (arabe, français, anglais, etc.)
	\item Des langues, comme le japonais, n'utilisent pas de marqueurs pour séparer les mots (\expword{今年は本当に忙しかったです。})
	\item Il existe des mots composés : par attachement (allemand : ``\expword{Lebensversicherung}, assurance vie"; arabe : ``\expword{\RL{y_htbrwnhm}}, ils les testent") ou par trait d'union (\expword{va-t-il, c-à-dire})
	\item Confusion entre des caractères : l'apostrophe est utilisée pour la citation, la contraction (\expword{She's, J'ai}) 
	\item Les expressions avec des mots multiples : \expword{les expressions numériques comme les dates}
\end{itemize}

Approches
\begin{itemize}
	\item Par règles : en utilisant des expressions régulières 
	\begin{itemize}
		\item \url{https://www.nltk.org/api/nltk.tokenize.html}
		\item \url{https://nlp.stanford.edu/software/tokenizer.shtml}
		\item \url{https://spacy.io/}
		\item \url{https://github.com/kariminf/jslingua}
		\item \url{https://github.com/linuxscout/pyarabic}
	\end{itemize}
	\item Statistique : en utilisant un modèle de langue pour calculer la probabilité qu'un caractère marque la  fin d'un mot 
	\begin{itemize}
		\item \url{https://nlp.stanford.edu/software/segmenter.html}
		\item \url{https://opennlp.apache.org/}
	\end{itemize}
\end{itemize}

%===================================================================================
\section{Normalisation du texte}
%===================================================================================

\begin{itemize}
	\item \textbf{PROBLÉMATIQUE} : Un texte peut contenir des variations du même terme. Aussi, dans des tâches comme la recherche d'information, on n'a pas besoin d'avoir le contenu exacte du texte.
	\item \textbf{SOLUTION} : transformer le texte à une forme canonique 
	\item \url{https://www.kaggle.com/c/text-normalization-challenge-english-language}
\end{itemize}

\begin{itemize}
	%	\item \optword{Tâche} : transformer le texte à une forme canonique
	
	\item Acronymes et les abréviations 
	\begin{itemize}
		\item forme standard : \expword{US \textrightarrow\ USA, U.S.A. \textrightarrow\ USA}
		\item version longue : \expword{M. \textrightarrow\ Monsieur}
	\end{itemize}
	
	\item Formater les valeurs comme les dates et les nombres de la même façon
	\begin{itemize}
		\item conversion à la forme textuelle : \expword{1205 DZD \textrightarrow\ Mille deux cents cinq dinars algériens}
		\item format spécifique : \expword{12 Janvier 1986, 12.01.86 \textrightarrow\ 1986-01-12}
		\item remplacement par le type : \expword{12 Janvier 1986 \textrightarrow\ DATE, kariminfo0@gmail.com \textrightarrow\ EMAIL}
	\end{itemize}
	
	\item Transformer les majuscules en minuscules. 
	\begin{itemize}
		\item \expword{Texte \textrightarrow\ texte}
		\item Des fois, il faut laisser la casse telle qu'elle est, comme dans les noms propres (\expword{Will})
	\end{itemize}
\end{itemize}

\begin{itemize}
	
	\item Contractions
	\begin{itemize}
		\item \expword{y'll \textrightarrow\ you all, s'il \textrightarrow\ si il}
	\end{itemize}
	
	\item Diacritiques
	\begin{itemize}
		\item désaccentuation :  \expword{système \textrightarrow\ systeme}
		\item dé-vocalisation :  \expword{\RL{yadrusu} \textrightarrow\ \RL{ydrs}}. Sauf dans les cas où on a besoin des diacritiques (poèmes)
	\end{itemize}
	
	\item Encodage 
	\begin{itemize}
		\item il faut utiliser le même encodage supporté dans le traitement
	\end{itemize}
	
\end{itemize}



%===================================================================================
\section{Filtrage du texte}
%===================================================================================

\begin{itemize}
	\item \textbf{PROBLÉMATIQUE} : le texte peut contenir des caractères, des mots et des expressions qui peuvent entraver son traitement
	\item \textbf{SOLUTION} : suppression
\end{itemize}

\begin{itemize}
	\item Les caractères spéciaux comme les caractères non imprimables
	\begin{itemize}
		\item ils peuvent mener à des traitements erronés 
	\end{itemize}
	\item Les mots clés dans les formats textuelles
	\begin{itemize}
		\item les balises HTML, XML, etc. 
	\end{itemize}
	\item Les \keyword{mots vides} : les mots non significatifs comme les prépositions, articles et les pronoms.
	\begin{itemize}
		\item en anglais : \keyword{stop words}
		\item dans la recherche d'information, il est inutile de les indexer
		\item dans le résumé automatique, ces mots peuvent dégrader les scores des phrases
	\end{itemize}
\end{itemize}

%===================================================================================
\section{Morphologie}
%===================================================================================

\begin{itemize}
	\item Des langues permettent la formation des mots en utilisant la flexion (ex. \expword{conjugaison}) et la dérivation (ex. \expword{nominalisation})
	\item La  méthode la plus utilisée est l'affixation 
	\item Automatiser cette tâche peut aider d'autres tâches, comme la génération du langage naturel (anglais : NLG)
	\item Aussi, la tâche inverse peut aider d'autres tâches, comme la compréhension du langage naturel (anglais : NLU)
\end{itemize}

\subsection{Formation des mots}

\begin{itemize}
	\item \optword{Flexion} : variation morphologique d'un mot selon les traits grammaticaux (nombre, genre, etc.)
	\begin{itemize}
		\item Conjugaison des verbes 
		\item Déclinaison des noms, pronoms, adjectifs et déterminants. 
		Ex. \expword{\RL{qi.t.t} \textrightarrow\ \RL{qi.ta.t}}, 
	\end{itemize}
	\item \optword{Dérivation} : variation morphologique d'un mot pour créer un nouveau lexème ou pour changer de catégorie
	\begin{itemize}
		\item Créer un nouveau lexème : \expword{couper \textrightarrow\ découper, \RL{`ml} \textrightarrow\ \RL{ist`ml}}
		\item Changer de catégorie : nominalisation (\expword{classer \textrightarrow\ classement, classeur ; \RL{darasa} \textrightarrow\ \RL{darsuN, madrasaTuN, mudarrisuN, dArisuN}}), l'adjectif (\expword{fatiguer \textrightarrow\ fatigant})
	\end{itemize}
\end{itemize}

Exemple (conjugaison automatique)
\begin{itemize}
	\item \optword{Base de données}
	\begin{itemize}
		\item stocker la conjugaison des verbes dans une base de données
		\item Exemple, conjugaison des verbes en arabe : \url{https://github.com/linuxscout/qutrub}
	\end{itemize}
	\item \optword{Modèles (\textit{template})}
	\begin{itemize}
		\item stocker la conjugaison de certains verbes modèles et utiliser une liste pour indexer les verbes similaires
		\item Exemple, \expword{la conjugaison des verbes en français}
	\end{itemize}
	\item \optword{Règles}
	\begin{itemize}
		\item utilisation des règles SI-SINON et des expressions régulières
		\item Exemple, conjugaison des verbes en arabe, anglais, français et japonais : \url{https://github.com/kariminf/jslingua}
	\end{itemize}
\end{itemize}

\subsection{Réduction des formes}

Racinisation
\begin{itemize}
	\item Suppression des affixes (anglais : \keyword{stemming})
	\item Résultat \keyword{radical} (\keyword{racine}) (anglais : \keyword{stem})
	\item Exemple, \expword{chercher \textrightarrow\ cherch}
	\item \optword{Base de données} : stocker tous les termes et leurs racines dans une table
	\item \optword{Statistiques} : utiliser un modèle de langue (N-Gram) pour estimer la position de troncation
	\item \optword{Règles}
	\begin{itemize}
		\item algorithme de Porter \cite{1980-porter}
		\item \url{https://github.com/assem-ch/arabicstemmer}
		\item \url{https://snowballstem.org/algorithms/}
	\end{itemize}
\end{itemize}

Racinisation (exemple, algorithme de Porter)
\begin{itemize}
	\item Un ensemble de règles condition/action
	\item \url{https://snowballstem.org/} : un framework pour créer des racinateurs
	\item \optword{Condition sur la racine}
	\begin{itemize}
		\item la longueur, la fin, si elle contient des voyelles, etc.
		\item Exemple, \expword{(*v*) Y \textrightarrow\ I : happy \textrightarrow\ happi, sky \textrightarrow\ sky}
	\end{itemize}
	\item \optword{Condition sur l'affixe}
	\begin{itemize}
		\item dans le cas de porter, il n'y a que le suffixe 
		\item Exemple, \expword{SSES \textrightarrow\ SS, ATIONAL \textrightarrow\ ATE}
	\end{itemize}
	\item \optword{Condition sur la règle}
	\begin{itemize}
		\item si une règle est exécutée, d'autres sont désactivées
	\end{itemize}
\end{itemize}

Lemmatisation
\begin{itemize}
	\item Chercher la forme canonique d'un mot (anglais : \keyword{lemmatization})
	\item Résultat : \keyword{lemme} (anglais : \keyword{lemma})
	\item Exemple, \expword{comprennent \textrightarrow comprendre, better \textrightarrow good}
	\item On doit avoir le contexte du mot. Ex. \expword{saw \textrightarrow\ (V) see ou (N) saw}
	\item \optword{Bases lexicales}
	\begin{itemize}
		\item \url{https://www.nltk.org/api/nltk.stem.html} (NLTK WordNetLemmatizer)
		\item \url{https://github.com/sloria/textblob}
		\item \url{https://spacy.io/}
	\end{itemize}
	\item \optword{Apprentissage automatique}
	\begin{itemize}
		\item \url{https://opennlp.apache.org/}
	\end{itemize}
\end{itemize}

Lemmatisation (exemple, morphy)
\begin{block}{Lemmatisation "morphy" de Wordnet}
	\footnotesize
	\begin{algorithm}[H]
		\KwData{mot, catégorie}
		\KwResult{liste des lemmes possibles}
		
		\Si{mot $ \in $  list\_exceptions[catégorie]}{
			\Return chercher\_dans\_dictionnaire(\{mot\} $ \cup $ list\_exceptions[catégorie])\;
		}
		
		formes = \{mot\}
		
		\Tq{formes $ \ne \emptyset $}{
			formes = supprimer\_les\_affixes(formes, catégorie)\;
			
			résultats = chercher\_dans\_dictionnaire(\{mot\} $ \cup $ formes)\;
			
			\Si{résultats $ \ne \emptyset $ }{
				\Return résultats \;
			}
		}
		
		\Return $ \emptyset $\;
		
	\end{algorithm}
\end{block}




\begin{discussion}



\end{discussion}

%=====================================================================
\ifx\wholebook\relax\else
% \cleardoublepage
% \bibliographystyle{../use/ESIbib}
% \bibliography{../bib/RATstat}
	\end{document}
\fi
%===================================================================== 
